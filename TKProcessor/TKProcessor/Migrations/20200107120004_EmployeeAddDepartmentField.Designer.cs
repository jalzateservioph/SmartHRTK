// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKProcessor.Contexts;

namespace TKProcessor.Migrations
{
    [DbContext(typeof(TKContext))]
    [Migration("20200107120004_EmployeeAddDepartmentField")]
    partial class EmployeeAddDepartmentField
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TKProcessor.Models.TK.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("AuditLog");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.CalendarDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegalHoliday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecialHoliday")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("CalendarDays");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.DailyTransactionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AbsentHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualLegSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDLegSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualNDSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualPostOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualPreOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualRestDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualRestDayOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ActualUndertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedLegSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDLegSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedNDSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedPostOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedPreOvertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedRestDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedRestDayOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedSpeHol")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedSpeHolOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedSpeHolRD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedSpeHolRDot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ApprovedUndertime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NightDifferential")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NightDifferentialOt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RegularWorkHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("WorkHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ShiftId");

                    b.ToTable("DailyTransactionRecord");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BiometricsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JobGradeBand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.EmployeeWorkSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WorkSiteId");

                    b.ToTable("EmployeeWorkSite");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRaised")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.GlobalSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DefaultNDEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DefaultNDStart")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("GlobalSetting");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Holiday");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LeaveHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LeaveType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Leave");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Mapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GlobalSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GlobalSettingId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Target")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GlobalSettingId");

                    b.HasIndex("GlobalSettingId1");

                    b.ToTable("Mapping");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.RawData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BiometricsId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("RawData");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.SelectionSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("GlobalSettingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GlobalSettingId");

                    b.ToTable("SelectionSetting");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AfterEvery")
                        .HasColumnType("int");

                    b.Property<decimal?>("AfterEveryEarlyOut")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("AmbreakIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AmbreakOut")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeductionLateIn")
                        .HasColumnType("int");

                    b.Property<int?>("DeductionOfEarlyOut")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DinnerIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DinnerOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EarliestTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EarliestTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FlextimeType")
                        .HasColumnType("int");

                    b.Property<int?>("FocusDate")
                        .HasColumnType("int");

                    b.Property<int?>("GracePeriodEarlyOut")
                        .HasColumnType("int");

                    b.Property<int?>("GracePeriodLateIn")
                        .HasColumnType("int");

                    b.Property<int?>("Increment")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEarlyOut")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHolidayRestDayOt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLateIn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOverbreak")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlusEarlyOutMinutes")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPlusLateInMinutes")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPostShiftOt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPreShiftOt")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRestDay")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LatestTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LunchIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LunchOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumHolidayRestDayOt")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumMinutesConsideredAsHalfAayEarlyOut")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumMinutesConsideredAsHalfDay")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumPostShiftOt")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumPreShiftOt")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumHolidayRestDayOt")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumPostShiftOt")
                        .HasColumnType("int");

                    b.Property<int?>("MinimumPreShiftOt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NightDiffEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NightDiffStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PmbreakIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PmbreakOut")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("RequiredWorkHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RoundHolidayRestDayOt")
                        .HasColumnType("int");

                    b.Property<int?>("RoundPostShiftOt")
                        .HasColumnType("int");

                    b.Property<int?>("RoundPreShiftOt")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ScheduleIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShiftCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShiftType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Shift");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DPUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.WorkSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkSiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ShiftId");

                    b.HasIndex("WorkSiteId");

                    b.ToTable("WorkSchedule");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.WorkSite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntegrationAuthPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegrationAuthUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("WorkSite");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.AuditLog", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Calendar", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.CalendarDay", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.DailyTransactionRecord", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("TKProcessor.Models.TK.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Employee", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.EmployeeWorkSite", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.Employee", "Employee")
                        .WithMany("EmployeeWorkSites")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKProcessor.Models.TK.WorkSite", "WorkSite")
                        .WithMany("WorkSiteEmployees")
                        .HasForeignKey("WorkSiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TKProcessor.Models.TK.ErrorLog", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.GlobalSetting", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Holiday", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Leave", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Mapping", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.GlobalSetting", null)
                        .WithMany("PayPackageMappings")
                        .HasForeignKey("GlobalSettingId");

                    b.HasOne("TKProcessor.Models.TK.GlobalSetting", null)
                        .WithMany("PayrollCodeMappings")
                        .HasForeignKey("GlobalSettingId1");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.RawData", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.SelectionSetting", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.GlobalSetting", null)
                        .WithMany("AutoApproveDTRFieldsList")
                        .HasForeignKey("GlobalSettingId");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.Shift", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.User", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithOne("LastModifiedBy")
                        .HasForeignKey("TKProcessor.Models.TK.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TKProcessor.Models.TK.WorkSchedule", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");

                    b.HasOne("TKProcessor.Models.TK.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.HasOne("TKProcessor.Models.TK.WorkSite", "WorkSite")
                        .WithMany()
                        .HasForeignKey("WorkSiteId");
                });

            modelBuilder.Entity("TKProcessor.Models.TK.WorkSite", b =>
                {
                    b.HasOne("TKProcessor.Models.TK.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("TKProcessor.Models.TK.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById");
                });
#pragma warning restore 612, 618
        }
    }
}
